/*
*******************************************************************************
\file btok.h
\brief STB 34.101.79 (btok): cryptographic tokens
\project bee2 [cryptographic library]
\created 2022.07.04
\version 2022.07.11
\license This program is released under the GNU General Public License
version 3. See Copyright Notices in bee2/info.h.
*******************************************************************************
*/

#ifndef __BEE2_BTOK_H
#define __BEE2_BTOK_H

#include "bee2/defs.h"

/*!
*******************************************************************************
\file btok.h
\brief Криптографическая архитектура СТБ 34.101.79 (btok)
*******************************************************************************
*/


#ifdef __cplusplus
extern "C" {
#endif

/*!
*******************************************************************************
\file btok.h

Реализованы отдельные механизмы СТБ 34.101.79 (btok):
-	управление облегченными (Card Verifiable, CV) сертификатами.

\expect{ERR_BAD_INPUT} Все входные указатели действительны. Исключение
составляют оговоренные случаи. К ним относится запрос на определение объема
памяти, которую требуется зарезервировать при повторном вызове
(конструкция [len?]ptr).  
*******************************************************************************
*/

/*!
*******************************************************************************
\file btok.h

\section btok-cvc CV-сертификаты

Управление CV-сертификатами реализовано в соответствии с профилем, заданным
в СТБ 34.101.79. Профиль назначает:
- использование стандартных долговременных параметров bign-curveXXXv1;
- использование алгоритмов bign-sign для выработки и проверки подписи;
- использование алгоритмов belt-hash, bash384, bash512 для хэширования
  подписываемых данных;
- использование (опциональное) 5-октетного слова прав доступа к прикладной
  программе eId;
- использование (опциональное) 2-октетного слова прав доступа к прикладной
  программе eSign;
- использование специфических объектных идентификаторов, в частности,
  bign-pubkey.

Информационные поля CV-сертификата перечислены в структуре btok_cvc_t.
Сертификат представляет собой DER-код данных полей.

Отсутствие в сертификате слова прав доступа означает, что оно является нулевым,
т.е. что права доступа отстутствуют. По кодировании сертификата нулевое слово
прав доступа опускается. При этом наличие в декодируемом сертификате нулевого
слова не считается ошибкой.

Дата в сертификате задается 6 октетами по схеме YYMMDD:
- первые два октета - год текущего века;
- следующие два октета - месяц;
- последние два октета - день месяцв.

Пример: {0x02, 0x02, 0x0, 0x7, 0x2, 0x9}.
*******************************************************************************
*/

/*!	\brief Информационное содержание CV-сертификата */
typedef struct
{
	char authority[13];		/*!< издатель (8 <= strLen(authority) <= 12) */
	char holder[13];		/*!< владелец (8 <= strLen(holder) <= 12) */
	octet pubkey[128];		/*!< открытый ключ */
	size_t pubkey_len;		/*!< длина ключа в октетах (64, 96 или 128) */
	octet from[6];			/*!< дата начала действия (YYMMDD) */
	octet until[6];			/*!< дата окончания действия (YYMMDD) */
	octet hat_eid[5];  		/*!< права доступа к eId (optional) */
	octet hat_esign[2];     /*!< права доступа к eSign (optional) */
	octet sig[96];			/*!< подпись */
	size_t sig_len;			/*!< длина подписи в октетах (48, 72 или 96) */
} btok_cvc_t;

/*!	\brief Проверка содержания CV-сертификата

	Проверяется корректность содержания cvc CV-сертификата.
	Проверка завершается успешно, если:
	- строки cvc->authority и cvc->holder состоят только из печатаемых
	  символов;
	- длины строк cvc->authority и cvc->holder лешат в диапазоне от 8 до 12;
	- [cvc->pubkey_len]cvc->pubkey является корректным ключом bign одного из
	  3 уровней стойкости (лежит на одной из 3-х стандартных эллиптических
	  кривых);
	- даты cvc->from и cvc->until корректны;
	- cvc->from <= cvc->until.
	\return ERR_OK, если проверка прошла успешно, и код ошибки в противном
	случае.
	\remark Подпись [cvc->sig_len]cvc->sig не проверяется.
*/
err_t btokCVCCheck(
	const btok_cvc_t* cvc		/*!< [in] содержание сертификата */
);

/*!	\brief Проверка содержания CV-сертификата с учетом данных издателя

	Проверяется корректность содержания cvc CV-сертификата с учетом
	содержания cvca сертификата (потенциального) издателя. 
	Выполняются следующие проверки:
	- btokCVCInfoVal(cvc) == TRUE;
	- cvc->authority == cvca->holder;
	- даты cvca->from и cvca->until корректны;
	- cvca->from <= cvc->from && cvc->from <= cvca->until.
	\return ERR_OK, если проверка прошла успешно, и код ошибки в противном
	случае.
	\remark Подпись [cvc->sig_len]cvc->sig не проверяется.
*/
err_t btokCVCCheck2(
	const btok_cvc_t* cvc,	/*!< [in] содержание сертификата */
	const btok_cvc_t* cvca	/*!< [in] содержание сертификата издателя */
);

/*!	\brief Создание CV-сертификата

	Создается CV-сертификат [cert_len?]cert с содержанием cvc. Сертификат
	подписывается на личном ключе [privkey_len]privkey. Подпись сохраняется
	в [cvc->sig_len]cvc->sig. Если cvc->pubkey_len == 0, то открытый ключ
	[cvc->pubkey_len]cvc->pubkey определяется по privkey и выходной
	сертификат выступает в роли доказательства владения личным ключом.
	\expect{ERR_BAD_NAME} Строки cvc->authority и cvc->holder состоят
	только из печатаемых символов, длины строк лежат в диапазоне от 8 до 12.
	\expect{ERR_BAD_DATE} Даты cvc->from и cvc->until корректны,
	cvc->from <= cvc->until.
	\expect{ERR_BAD_PUBKEY} [cvc->pubkey_len]cvc->pubkey является корректным
	ключом bign одного из 3 уровней стойкости (лежит на одной из трех
	стандартных эллиптических кривых).
	\return ERR_OK, если сертификат успешно создан, и код ошибки в противном
	случае.
	\remark Используется детерминированный режим выработки подписи. Если
	инициализирован штатный ГСЧ, то дополнительно используются данные от него.
	\remark Устанавливая cvc->pubkey_len == 0 && cvc->authority == cvc->holder,
	можно создать самоподписанный сертификат.
	\remark Устанавливая cvc->pubkey_len == 0 && cvc->authority != cvc->holder,
	можно создать предварительный сертификат, подпись которого будет изменена
	в дальнейшем стороной cvc->authority. Предварительный сертификат
	доказывает владение стороной cvc->holder личным ключом, которому
	соответствует открытый ключ cvc->pubkey. Предварительный сертификат
	выступает в роли запроса на выпуск сертификата.
*/
err_t btokCVCWrap(
    octet cert[],				/*!< [out] сертификат */
	size_t* cert_len,			/*!< [out] длина cert в октетах */
	btok_cvc_t* cvc,			/*!< [in/out] содержание сертификата */
	const octet privkey[],		/*!< [in] личный ключ */
	size_t privkey_len			/*!< [in] длина privkey в октетах */
);

/*!	\brief Разбор CV-сертификата

	Определяется и проверяется содержание cvc CV-сертификата [cert_len]cert.
	Подпись сертификата проверяется на открытом ключе [privkey_len]privkey.
	Может передаваться нулевая длина pubkey_len, и тогда указатель pubkey
	игнорируется, а подпись не проверяется.
	\return ERR_OK, если сертификат успешно разобран, и код ошибки в
	противном случае. При проверке cvc коды ERR_BAD_NAME, ERR_BAD_DATE,
	ERR_BAD_PUBKEY возвращаются при условиях, заданных в описании функции
	btokCVCWrap().
	\remark Выходной буфер cvc может пересекаться с входными буферами.
*/
err_t btokCVCUnwrap(
	btok_cvc_t* cvc,			/*!< [out] содержание сертификата */
	const octet cert[],			/*!< [in] сертификат */
	size_t cert_len,			/*!< [in] длина cert в октетах */
	const octet pubkey[],		/*!< [in] открытый ключ */
	size_t pubkey_len			/*!< [in] длина pubkey в октетах */
);

/*!	\brief Выпуск CV-сертификата

	Выпускается CV-сертификат [cert_len?]cert с содержанием cvc. Сертификат
	подписывается на личном ключе [privkey_len]privkey. Подпись сохраняется
	в [cvc->sig_len]cvc->sig.
	\return ERR_OK, если сертификат успешно создан, и код ошибки в противном
	случае.
	\remark Используется детерминированный режим выработки подписи. Если
	инициализирован штатный ГСЧ, то дополнительно используются данные от него.
	\remark Создание самоподписанного (корневого) сертификата:
	- cvc->authority == cvc->holder;
	- [privkey_len]privkey == [cvc->privkey_len]cvc->privkey.
	\remark Создание доказательства знания личного ключа:
	- cvc->authority -- имя проверяющей стороны или будущего издателя;
	- cvc->holder -- владелец;
	- [privkey_len]privkey == [cvc->privkey_len]cvc->privkey.
*/
err_t btokCVCWrap(
	octet cert[],				/*!< [out] сертификат */
	size_t* cert_len,			/*!< [out] длина cert в октетах */
	btok_cvc_t* ci,				/*!< [in/out] содержание сертификата */
	const octet privkey[],		/*!< [in] личный ключ */
	size_t privkey_len			/*!< [in] длина privkey в октетах */
);

/*!	\brief Проверка CV-сертификата

	Проверяется корректность CV-сертификата [cert_len]cert, для чего
	используется сертификат издателя [certa_len]certa и дата проверки date.
	Проверка завершается успешно, если:
	- cert имеет корректный формат;
	- certa имеет корректный формат;
	- имя издателя в cert совпадает с именем владельца в cert;
	- подпись cert признается корректной на открытом ключе из certa;
	- начало действия cert не выходит за пределы срока действия certa;
	- date попадает в срок действия cert.
	Указатель date может быть нулевым, и тогда последнее условие
	не проверяется. В случае успеха определяется информационное содержание
	ci сертификата. Указатель cvc может быть нулевым, и тогда содержание не
	определяется.
	\return ERR_OK, если сертификат признан корректным, и код ошибки в
	противном случае. 
	\remark Проверка цепочки сертификатов certa, certb, certc,...:
	- btokCVCParse(cvca, certa, certa_len);
	- btokCVCVal(0, certa, certa_len, cvca, date);
	- btokCVCVal(cvcb, certb, certb_len, cvca, date);
	- btokCVCVal(cvcc, certc, certb_len, cvcb, date);
	- ...
*/
err_t btokCVCVal(
	btok_cvc_t* cvc,		/*!< [out] содержание сертификата */
	const octet cert[],		/*!< [in] сертификат */
	size_t cert_len,		/*!< [in] длина cert в октетах */
	const octet cvca[],		/*!< [in] содержание сертификата издателя */
	const octet* date		/*!< [in] дата проверки */
);

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif /*__BEE2_BTOK_H */
